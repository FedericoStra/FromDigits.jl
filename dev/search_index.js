var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FromDigits","category":"page"},{"location":"#FromDigits","page":"Home","title":"FromDigits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FromDigits.jl.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using FromDigits\n\njulia> digits(739)\n3-element Vector{Int64}:\n 9\n 3\n 7\n\njulia> fromdigits([9, 3, 7])\n739\n\njulia> fromdigits(fill(1, 19))\n1111111111111111111\n\njulia> fromdigits(fill(1, 20))\nERROR: OverflowError: 10 * 1111111111111111111 overflowed for type Int64\nStacktrace:\n[...]\n\njulia> fromdigits_unchecked(fill(1, 20))\n-7335632962598440505\n\njulia> fromdigits(BigInt, fill(1, 20))\n11111111111111111111","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Public","page":"Home","title":"Public","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [FromDigits]\nPrivate = false","category":"page"},{"location":"#FromDigits.fromdigits","page":"Home","title":"FromDigits.fromdigits","text":"Converts from digits to an integer. This is the inverse function of digits.\n\nReturns the integer represented by the digits in the base. The result is of type T, which defaults to D.\n\nSee also fromdigits_unchecked.\n\n\n\n\n\n","category":"function"},{"location":"#FromDigits.fromdigits-Union{Tuple{AbstractVector{D}}, Tuple{D}} where D<:Integer","page":"Home","title":"FromDigits.fromdigits","text":"fromdigits(digits::AbstractVector{D}; base::D=D(10)) where D<:Integer\n\nReturns the integer represented by the digits in the base. The result is of type D.\n\n\n\n\n\n","category":"method"},{"location":"#FromDigits.fromdigits-Union{Tuple{D}, Tuple{Type{var\"#s6\"} where var\"#s6\"<:Integer, AbstractVector{D}}} where D<:Integer","page":"Home","title":"FromDigits.fromdigits","text":"fromdigits(T::Type{<:Integer}, digits::AbstractVector{D}; base::D=D(10)) where D<:Integer\n\nReturns the integer represented by the digits in the base. The result is of type T.\n\n\n\n\n\n","category":"method"},{"location":"#FromDigits.fromdigits_unchecked","page":"Home","title":"FromDigits.fromdigits_unchecked","text":"Converts from digits to an integer. This is the inverse function of digits.\n\nThis function does not check the validity of the digits nor overflows in the computations.\n\nSee also fromdigits.\n\n\n\n\n\n","category":"function"},{"location":"#Private","page":"Home","title":"Private","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [FromDigits]\nPublic = false","category":"page"}]
}
